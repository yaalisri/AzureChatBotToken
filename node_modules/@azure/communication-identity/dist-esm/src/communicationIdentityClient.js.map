{"version":3,"file":"communicationIdentityClient.js","sourceRoot":"","sources":["../../src/communicationIdentityClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  createCommunicationAuthPolicy,\n  parseClientArguments,\n  isKeyCredential,\n  CommunicationUserIdentifier\n} from \"@azure/communication-common\";\nimport { isTokenCredential, KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport {\n  InternalPipelineOptions,\n  createPipelineFromOptions,\n  OperationOptions,\n  operationOptionsToRequestOptionsBase\n} from \"@azure/core-http\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { CommunicationIdentity, IdentityRestClient } from \"./generated/src/identityRestClient\";\nimport { SDK_VERSION } from \"./constants\";\nimport { logger } from \"./common/logger\";\nimport { createSpan } from \"./common/tracing\";\nimport {\n  CommunicationIdentityClientOptions,\n  TokenScope,\n  CommunicationUserToken,\n  CommunicationAccessToken\n} from \"./models\";\n\nconst isCommunicationIdentityClientOptions = (\n  options: any\n): options is CommunicationIdentityClientOptions =>\n  options && !isTokenCredential(options) && !isKeyCredential(options);\n\n/**\n * Client class for interacting with Azure Communication Services User Token Management.\n */\nexport class CommunicationIdentityClient {\n  /**\n   * A reference to the auto-generated UserToken HTTP client.\n   */\n  private readonly client: CommunicationIdentity;\n\n  /**\n   * Initializes a new instance of the CommunicationIdentity class.\n   * @param connectionString - Connection string to connect to an Azure Communication Service resource.\n   *                         Example: \"endpoint=https://contoso.eastus.communications.azure.net/;accesskey=secret\";\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(connectionString: string, options?: CommunicationIdentityClientOptions);\n\n  /**\n   * Initializes a new instance of the CommunicationIdentity class using an Azure KeyCredential.\n   * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential - An object that is used to authenticate requests to the service. Use the AzureKeyCredential or `@azure/identity` to create a credential.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential,\n    options?: CommunicationIdentityClientOptions\n  );\n  /**\n   * Initializes a new instance of the CommunicationIdentity class using a TokenCredential.\n   * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net)\n   * @param credential - TokenCredential that is used to authenticate requests to the service.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    endpoint: string,\n    credential: TokenCredential,\n    options?: CommunicationIdentityClientOptions\n  );\n\n  public constructor(\n    connectionStringOrEndpoint: string,\n    credentialOrOptions?: KeyCredential | CommunicationIdentityClientOptions | TokenCredential,\n    maybeOptions: CommunicationIdentityClientOptions = {}\n  ) {\n    const { url, credential } = parseClientArguments(\n      connectionStringOrEndpoint,\n      credentialOrOptions\n    );\n    const options = isCommunicationIdentityClientOptions(credentialOrOptions)\n      ? credentialOrOptions\n      : maybeOptions;\n    const libInfo = `azsdk-js-communication-identity/${SDK_VERSION}`;\n\n    if (!options.userAgentOptions) {\n      options.userAgentOptions = {};\n    }\n\n    if (options.userAgentOptions.userAgentPrefix) {\n      options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      options.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info\n        }\n      }\n    };\n\n    const authPolicy = createCommunicationAuthPolicy(credential);\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n    this.client = new IdentityRestClient(url, pipeline).communicationIdentity;\n  }\n\n  /**\n   * Creates a scoped user token.\n   *\n   * @param user - The user whose tokens are being issued.\n   * @param scopes - Scopes to include in the token.\n   * @param options - Additional options for the request.\n   */\n  public async getToken(\n    user: CommunicationUserIdentifier,\n    scopes: TokenScope[],\n    options: OperationOptions = {}\n  ): Promise<CommunicationAccessToken> {\n    const { span, updatedOptions } = createSpan(\"CommunicationIdentity-issueToken\", options);\n    try {\n      const { _response, ...result } = await this.client.issueAccessToken(\n        user.communicationUserId,\n        { scopes },\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Revokes all data and tokens created for a user.\n   *\n   * @param user - The user whose tokens are being revoked.\n   * @param options - Additional options for the request.\n   */\n  public async revokeTokens(\n    user: CommunicationUserIdentifier,\n    options: OperationOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"CommunicationIdentity-revokeTokens\", options);\n    try {\n      await this.client.revokeAccessTokens(\n        user.communicationUserId,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a single user.\n   *\n   * @param options - Additional options for the request.\n   */\n  public async createUser(options: OperationOptions = {}): Promise<CommunicationUserIdentifier> {\n    const { span, updatedOptions } = createSpan(\"CommunicationIdentity-createUser\", options);\n    try {\n      const result = await this.client.create(operationOptionsToRequestOptionsBase(updatedOptions));\n      return {\n        communicationUserId: result.identity.id\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a single user and a token simultaneously.\n   *\n   * @param scopes - Scopes to include in the token.\n   * @param options - Additional options for the request.\n   */\n  public async createUserAndToken(\n    scopes: TokenScope[],\n    options: OperationOptions = {}\n  ): Promise<CommunicationUserToken> {\n    const { span, updatedOptions } = createSpan(\n      \"CommunicationIdentity-createUserAndToken\",\n      options\n    );\n    try {\n      const { identity, accessToken } = await this.client.create({\n        body: { createTokenWithScopes: scopes },\n        ...operationOptionsToRequestOptionsBase(updatedOptions)\n      });\n      return {\n        ...accessToken!,\n        user: { communicationUserId: identity.id }\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Triggers revocation event for user and deletes all its data.\n   *\n   * @param user - The user being deleted.\n   * @param options - Additional options for the request.\n   */\n  public async deleteUser(\n    user: CommunicationUserIdentifier,\n    options: OperationOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"CommunicationIdentity-deleteUser\", options);\n    try {\n      await this.client.delete(\n        user.communicationUserId,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"]}